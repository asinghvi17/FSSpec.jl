var documenterSearchIndex = {"docs":
[{"location":"filepathsbase/#FilePathsBase-integration","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"","category":"section"},{"location":"filepathsbase/","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"We will expose a type FSPath that implements the FilePathsBase interface, but refers to some file relative to a filesystem.  Each FSPath will store a reference to the fsspec filesystem it came from, and a string that encodes the relative path.","category":"page"},{"location":"filepathsbase/","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"We will implement a subset of the FilePathsBase interface, but things like tempdir are flat out impossible in a virtual filesystem for example.  In so far as possible we will endeavour to make this work for three purposes:","category":"page"},{"location":"filepathsbase/","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"Reading files, or byte ranges of files\nExamining the structure of the filesystem (ls, stat, isdir, etc)\nJoining paths (join, dirname, basename, etc)","category":"page"},{"location":"filepathsbase/","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"We may (as a stretch goal) support writing files, but this is not a priority.","category":"page"},{"location":"filepathsbase/","page":"FilePathsBase integration","title":"FilePathsBase integration","text":"We will likely not support modifying file structure (moving, deleting, etc).","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = FSSpec","category":"page"},{"location":"#FSSpec","page":"Home","title":"FSSpec","text":"","category":"section"},{"location":"#What-is-this-thing?","page":"Home","title":"What is this thing?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"It's a package that wraps Python's fsspec library.  Specifically meant for integration with Zarr.jl and the DimensionalData ecosystem, but it can be used for other things too.","category":"page"},{"location":"","page":"Home","title":"Home","text":"fsspec is a Python library that provides a unified interface for working with various storage backends, from local directories to HTTP, S3, Tar archives, and even virtual filesystems defined by dictionaries.  It's used in xarray and similar packages to simplify the loading story for data.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, FSSpec.jl only exports a Zarr storage backend called FSStore.  This wraps an fsspec filesystem, allowing you to use it as a Zarr storage backend.  The fsspec file system can be absolutely anything!","category":"page"},{"location":"","page":"Home","title":"Home","text":"The quick start example shows how to load a Kerchunk catalog into a Zarr dataset, then wrap it in YAXArrays.jl to get a DimensionalArray, which works with the DimensionalData ecosystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for FSSpec.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [FSSpec]","category":"page"}]
}
